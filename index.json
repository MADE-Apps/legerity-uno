{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Explore the APIs | Legerity | Legerity for Uno Platform",
    "keywords": "Explore the APIs Here you'll find all of the generated code documentation for the Legerity projects, similar to what you might find on Microsoft Docs! This documentation is designed to show you how each component of Legerity is constructed and provide a reference for you when building your UI test projects."
  },
  "api/Legerity.Uno.ByExtras.html": {
    "href": "api/Legerity.Uno.ByExtras.html",
    "title": "Class ByExtras | Legerity for Uno Platform",
    "keywords": "Class ByExtras Defines a collection of extra locator constraints for . Inheritance System.Object ByExtras Namespace : Legerity.Uno Assembly : Legerity.Uno.dll Syntax public static class ByExtras : object Methods | Improve this Doc View Source AndroidContentDescription(String) Gets a mechanism to find elements by an Android content description. Declaration public static By AndroidContentDescription(string contentDesc) Parameters Type Name Description System.String contentDesc The content description to match exactly on. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source AndroidPartialContentDescription(String) Gets a mechanism to find elements by an Android partial content description. Declaration public static By AndroidPartialContentDescription(string contentDesc) Parameters Type Name Description System.String contentDesc The partial content description to match on. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source AndroidXamlAutomationId(String) Gets a mechanism to find elements by an Android XAML ID. Declaration public static By AndroidXamlAutomationId(string xuid) Parameters Type Name Description System.String xuid The XAML element ID. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source AndroidXamlName(String) Gets a mechanism to find elements by an Android XAML name. Declaration public static By AndroidXamlName(string name) Parameters Type Name Description System.String name The XAML element name. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source IOSXamlAutomationId(String) Gets a mechanism to find elements by an iOS XAML ID. Declaration public static By IOSXamlAutomationId(string xuid) Parameters Type Name Description System.String xuid The XAML element ID. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source WebXamlAutomationId(String) Gets a mechanism to find elements by a web XAML ID. Declaration public static By WebXamlAutomationId(string xuid) Parameters Type Name Description System.String xuid The XAML element ID. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source WebXamlName(String) Gets a mechanism to find elements by a web XAML name. Declaration public static By WebXamlName(string name) Parameters Type Name Description System.String name The XAML element name. Returns Type Description By A object the driver can use to find elements. | Improve this Doc View Source WebXamlType(String) Gets a mechanism to find elements by a web XAML type. Declaration public static By WebXamlType(string xamlType) Parameters Type Name Description System.String xamlType The XAML element type. Returns Type Description By A object the driver can use to find elements."
  },
  "api/Legerity.Uno.Elements.AppBarButton.html": {
    "href": "api/Legerity.Uno.Elements.AppBarButton.html",
    "title": "Class AppBarButton | Legerity for Uno Platform",
    "keywords": "Class AppBarButton Defines a wrapper for the core AppBarButton control. Inheritance System.Object UnoElementWrapper Button AppBarButton AppBarToggleButton Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class AppBarButton : Button Constructors | Improve this Doc View Source AppBarButton(IWebElement) Initializes a new instance of the AppBarButton class. Declaration public AppBarButton(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source AppBarButton(RemoteWebElement) Initializes a new instance of the AppBarButton class. Declaration public AppBarButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Fields | Improve this Doc View Source WindowsType Defines the Windows type for the AppBarButton . Declaration public const string WindowsType = null Field Value Type Description System.String Operators | Improve this Doc View Source Implicit(RemoteWebElement to AppBarButton) Allows conversion of a to the AppBarButton without direct casting. Declaration public static implicit operator AppBarButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description AppBarButton The AppBarButton . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.AppBarToggleButton.html": {
    "href": "api/Legerity.Uno.Elements.AppBarToggleButton.html",
    "title": "Class AppBarToggleButton | Legerity for Uno Platform",
    "keywords": "Class AppBarToggleButton Defines a wrapper for the core AppBarToggleButton control. Inheritance System.Object UnoElementWrapper Button AppBarButton AppBarToggleButton Inherited Members AppBarButton.WindowsType UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class AppBarToggleButton : AppBarButton Constructors | Improve this Doc View Source AppBarToggleButton(RemoteWebElement) Initializes a new instance of the AppBarToggleButton class. Declaration public AppBarToggleButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source IsOn Gets a value indicating whether the toggle button is in the on position. Declaration public virtual bool IsOn { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ToggleOff() Toggles the button off. Declaration public virtual void ToggleOff() | Improve this Doc View Source ToggleOn() Toggles the button on. Declaration public virtual void ToggleOn() Operators | Improve this Doc View Source Implicit(RemoteWebElement to AppBarToggleButton) Allows conversion of a to the AppBarToggleButton without direct casting. Declaration public static implicit operator AppBarToggleButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description AppBarToggleButton The AppBarToggleButton . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.Button.html": {
    "href": "api/Legerity.Uno.Elements.Button.html",
    "title": "Class Button | Legerity for Uno Platform",
    "keywords": "Class Button Defines a wrapper for the core Button control. Inheritance System.Object UnoElementWrapper Button AppBarButton HyperlinkButton Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class Button : UnoElementWrapper Constructors | Improve this Doc View Source Button(IWebElement) Initializes a new instance of the Button class. Declaration public Button(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source Button(RemoteWebElement) Initializes a new instance of the Button class. Declaration public Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Fields | Improve this Doc View Source WindowsType Defines the Windows type for the Button . Declaration public const string WindowsType = null Field Value Type Description System.String Operators | Improve this Doc View Source Implicit(RemoteWebElement to Button) Allows conversion of a to the Button without direct casting. Declaration public static implicit operator Button(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description Button The Button . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.CheckBox.html": {
    "href": "api/Legerity.Uno.Elements.CheckBox.html",
    "title": "Class CheckBox | Legerity for Uno Platform",
    "keywords": "Class CheckBox Defines a wrapper for the core CheckBox control. Inheritance System.Object UnoElementWrapper CheckBox Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class CheckBox : UnoElementWrapper Constructors | Improve this Doc View Source CheckBox(IWebElement) Initializes a new instance of the CheckBox class. Declaration public CheckBox(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source CheckBox(RemoteWebElement) Initializes a new instance of the CheckBox class. Declaration public CheckBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source IsChecked Gets a value indicating whether the check box is in the checked state. Declaration public virtual bool IsChecked { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIndeterminate Gets a value indicating whether the check box is in the indeterminate state. Declaration public virtual bool IsIndeterminate { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CheckOff() Checks the check box off. Declaration public virtual void CheckOff() | Improve this Doc View Source CheckOn() Checks the check box on. Declaration public virtual void CheckOn() Operators | Improve this Doc View Source Implicit(RemoteWebElement to CheckBox) Allows conversion of a to the CheckBox without direct casting. Declaration public static implicit operator CheckBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CheckBox The CheckBox . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.ComboBox.html": {
    "href": "api/Legerity.Uno.Elements.ComboBox.html",
    "title": "Class ComboBox | Legerity for Uno Platform",
    "keywords": "Class ComboBox Defines a wrapper for the core ComboBox control. Inheritance System.Object UnoElementWrapper ComboBox Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class ComboBox : UnoElementWrapper Constructors | Improve this Doc View Source ComboBox(IWebElement) Initializes a new instance of the ComboBox class. Declaration public ComboBox(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source ComboBox(RemoteWebElement) Initializes a new instance of the ComboBox class. Declaration public ComboBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source SelectedItem Gets the currently selected item. Declaration public virtual string SelectedItem { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SelectItem(String) Selects an item in the combo-box with the specified item name. Declaration public virtual void SelectItem(string name) Parameters Type Name Description System.String name The name of the item to select. Operators | Improve this Doc View Source Implicit(RemoteWebElement to ComboBox) Allows conversion of a to the ComboBox without direct casting. Declaration public static implicit operator ComboBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description ComboBox The ComboBox . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.CommandBar.html": {
    "href": "api/Legerity.Uno.Elements.CommandBar.html",
    "title": "Class CommandBar | Legerity for Uno Platform",
    "keywords": "Class CommandBar Defines a wrapper for the core CommandBar control. Inheritance System.Object UnoElementWrapper CommandBar Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class CommandBar : UnoElementWrapper Constructors | Improve this Doc View Source CommandBar(IWebElement) Initializes a new instance of the CommandBar class. Declaration public CommandBar(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source CommandBar(RemoteWebElement) Initializes a new instance of the CommandBar class. Declaration public CommandBar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source MoreButton Gets the secondary (more) options button. Declaration public virtual AppBarButton MoreButton { get; } Property Value Type Description AppBarButton | Improve this Doc View Source PrimaryButtons Gets the collection of primary buttons. Declaration public virtual IEnumerable<AppBarButton> PrimaryButtons { get; } Property Value Type Description IEnumerable < AppBarButton > | Improve this Doc View Source SecondaryButtons Gets the collection of secondary buttons. Note, this property will only return a result when the secondary buttons are shown in the flyout. Declaration public virtual IEnumerable<AppBarButton> SecondaryButtons { get; } Property Value Type Description IEnumerable < AppBarButton > Methods | Improve this Doc View Source ClickPrimaryButton(String) Clicks a primary button in the command bar with the specified button name. Declaration public virtual void ClickPrimaryButton(string name) Parameters Type Name Description System.String name The name of the button to click. | Improve this Doc View Source ClickPrimaryButtonByPartialName(String) Clicks a primary button in the command bar with the specified partial button name. Declaration public virtual void ClickPrimaryButtonByPartialName(string name) Parameters Type Name Description System.String name The partial name of the button to click. | Improve this Doc View Source ClickSecondaryButton(String) Clicks a secondary button in the command bar with the specified button name. Declaration public virtual void ClickSecondaryButton(string name) Parameters Type Name Description System.String name The name of the button to click. | Improve this Doc View Source ClickSecondaryButtonByPartialName(String) Clicks a secondary button in the command bar with the specified partial button name. Declaration public virtual void ClickSecondaryButtonByPartialName(string name) Parameters Type Name Description System.String name The partial name of the button to click. | Improve this Doc View Source OpenSecondaryButtonMenu() Opens the menu associated with the secondary button options. Declaration public virtual void OpenSecondaryButtonMenu() Operators | Improve this Doc View Source Implicit(RemoteWebElement to CommandBar) Allows conversion of a to the CommandBar without direct casting. Declaration public static implicit operator CommandBar(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description CommandBar The CommandBar . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.DatePicker.html": {
    "href": "api/Legerity.Uno.Elements.DatePicker.html",
    "title": "Class DatePicker | Legerity for Uno Platform",
    "keywords": "Class DatePicker Defines a wrapper for the core DatePicker control. Inheritance System.Object UnoElementWrapper DatePicker Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class DatePicker : UnoElementWrapper Constructors | Improve this Doc View Source DatePicker(IWebElement) Initializes a new instance of the DatePicker class. Declaration public DatePicker(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source DatePicker(RemoteWebElement) Initializes a new instance of the DatePicker class. Declaration public DatePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source SelectedDate Gets the date value of the date picker. Declaration public DateTime? SelectedDate { get; } Property Value Type Description System.Nullable < DateTime > Methods | Improve this Doc View Source SetDate(DateTime) Sets the date to the specified date. Declaration public virtual void SetDate(DateTime date) Parameters Type Name Description DateTime date The date to set. Operators | Improve this Doc View Source Implicit(RemoteWebElement to DatePicker) Allows conversion of a to the DatePicker without direct casting. Declaration public static implicit operator DatePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description DatePicker The DatePicker . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.html": {
    "href": "api/Legerity.Uno.Elements.html",
    "title": "Namespace Legerity.Uno.Elements | Legerity for Uno Platform",
    "keywords": "Namespace Legerity.Uno.Elements Classes AppBarButton Defines a wrapper for the core AppBarButton control. AppBarToggleButton Defines a wrapper for the core AppBarToggleButton control. Button Defines a wrapper for the core Button control. CheckBox Defines a wrapper for the core CheckBox control. ComboBox Defines a wrapper for the core ComboBox control. CommandBar Defines a wrapper for the core CommandBar control. DatePicker Defines a wrapper for the core DatePicker control. HyperlinkButton Defines a wrapper for the core HyperlinkButton control. TextBlock Defines a wrapper for the core TextBlock control. TextBox Defines a wrapper for the core TextBox control. TimePicker Defines a wrapper for the core TimePicker control. UnoElementWrapper Defines an element wrapper for a ."
  },
  "api/Legerity.Uno.Elements.HyperlinkButton.html": {
    "href": "api/Legerity.Uno.Elements.HyperlinkButton.html",
    "title": "Class HyperlinkButton | Legerity for Uno Platform",
    "keywords": "Class HyperlinkButton Defines a wrapper for the core HyperlinkButton control. Inheritance System.Object UnoElementWrapper Button HyperlinkButton Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class HyperlinkButton : Button Constructors | Improve this Doc View Source HyperlinkButton(IWebElement) Initializes a new instance of the HyperlinkButton class. Declaration public HyperlinkButton(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source HyperlinkButton(RemoteWebElement) Initializes a new instance of the HyperlinkButton class. Declaration public HyperlinkButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Fields | Improve this Doc View Source WindowsType Defines the Windows type for the HyperlinkButton . Declaration public const string WindowsType = null Field Value Type Description System.String Operators | Improve this Doc View Source Implicit(RemoteWebElement to HyperlinkButton) Allows conversion of a to the HyperlinkButton without direct casting. Declaration public static implicit operator HyperlinkButton(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description HyperlinkButton The HyperlinkButton . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.TextBlock.html": {
    "href": "api/Legerity.Uno.Elements.TextBlock.html",
    "title": "Class TextBlock | Legerity for Uno Platform",
    "keywords": "Class TextBlock Defines a wrapper for the core TextBlock control. Inheritance System.Object UnoElementWrapper TextBlock Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class TextBlock : UnoElementWrapper Constructors | Improve this Doc View Source TextBlock(IWebElement) Initializes a new instance of the TextBlock class. Declaration public TextBlock(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source TextBlock(RemoteWebElement) Initializes a new instance of the TextBlock class. Declaration public TextBlock(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Text Gets the text value of the text block. Declaration public virtual string Text { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(RemoteWebElement to TextBlock) Allows conversion of a to the TextBlock without direct casting. Declaration public static implicit operator TextBlock(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextBlock The TextBlock . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.TextBox.html": {
    "href": "api/Legerity.Uno.Elements.TextBox.html",
    "title": "Class TextBox | Legerity for Uno Platform",
    "keywords": "Class TextBox Defines a wrapper for the core TextBox control. Inheritance System.Object UnoElementWrapper TextBox Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class TextBox : UnoElementWrapper Constructors | Improve this Doc View Source TextBox(IWebElement) Initializes a new instance of the TextBox class. Declaration public TextBox(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source TextBox(RemoteWebElement) Initializes a new instance of the TextBox class. Declaration public TextBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source InputElement Gets the element associated with the text box input. Declaration public virtual RemoteWebElement InputElement { get; } Property Value Type Description RemoteWebElement | Improve this Doc View Source IsReadonly Gets a value indicating whether the text box is in a readonly state. Declaration public virtual bool IsReadonly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Text Gets the text value of the text box. Declaration public virtual string Text { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AppendText(String) Appends the specified text to the text box. Declaration public virtual void AppendText(string text) Parameters Type Name Description System.String text The text to append. | Improve this Doc View Source ClearText() Clears the text from the text box. Declaration public virtual void ClearText() | Improve this Doc View Source SetText(String) Sets the text of the text box to the specified text. Declaration public virtual void SetText(string text) Parameters Type Name Description System.String text The text to display. Operators | Improve this Doc View Source Implicit(RemoteWebElement to TextBox) Allows conversion of a to the TextBox without direct casting. Declaration public static implicit operator TextBox(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TextBox The TextBox . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.TimePicker.html": {
    "href": "api/Legerity.Uno.Elements.TimePicker.html",
    "title": "Class TimePicker | Legerity for Uno Platform",
    "keywords": "Class TimePicker Defines a wrapper for the core TimePicker control. Inheritance System.Object UnoElementWrapper TimePicker Inherited Members UnoElementWrapper.Element UnoElementWrapper.Driver UnoElementWrapper.IsEnabled UnoElementWrapper.IsVisible UnoElementWrapper.FindElement(By) UnoElementWrapper.FindElements(By) UnoElementWrapper.Click() UnoElementWrapper.GetAttribute(String) UnoElementWrapper.VerifyElementShown(By) UnoElementWrapper.VerifyElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementsShown(By) UnoElementWrapper.VerifyElementsShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyElementNotShown(By) UnoElementWrapper.VerifyDriverElementShown(By, Nullable<TimeSpan>) UnoElementWrapper.VerifyDriverElementsShown(By, Nullable<TimeSpan>) Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public class TimePicker : UnoElementWrapper Constructors | Improve this Doc View Source TimePicker(IWebElement) Initializes a new instance of the TimePicker class. Declaration public TimePicker(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source TimePicker(RemoteWebElement) Initializes a new instance of the TimePicker class. Declaration public TimePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source SelectedTime Gets the time value of the time picker. Declaration public virtual TimeSpan? SelectedTime { get; } Property Value Type Description System.Nullable < TimeSpan > Methods | Improve this Doc View Source SetTime(TimeSpan) Sets the time to the specified time. Declaration public virtual void SetTime(TimeSpan time) Parameters Type Name Description TimeSpan time The time to set. Operators | Improve this Doc View Source Implicit(RemoteWebElement to TimePicker) Allows conversion of a to the TimePicker without direct casting. Declaration public static implicit operator TimePicker(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The . Returns Type Description TimePicker The TimePicker . Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Elements.UnoElementWrapper.html": {
    "href": "api/Legerity.Uno.Elements.UnoElementWrapper.html",
    "title": "Class UnoElementWrapper | Legerity for Uno Platform",
    "keywords": "Class UnoElementWrapper Defines an element wrapper for a . Inheritance System.Object UnoElementWrapper Button CheckBox ComboBox CommandBar DatePicker TextBlock TextBox TimePicker Namespace : Legerity.Uno.Elements Assembly : Legerity.Uno.dll Syntax public abstract class UnoElementWrapper : IElementWrapper<RemoteWebElement> Constructors | Improve this Doc View Source UnoElementWrapper(IWebElement) Initializes a new instance of the UnoElementWrapper class. Declaration protected UnoElementWrapper(IWebElement element) Parameters Type Name Description IWebElement element The reference. | Improve this Doc View Source UnoElementWrapper(RemoteWebElement) Initializes a new instance of the UnoElementWrapper class. Declaration protected UnoElementWrapper(RemoteWebElement element) Parameters Type Name Description RemoteWebElement element The reference. Properties | Improve this Doc View Source Driver Gets the instance of the driver for the application. Declaration public RemoteWebDriver Driver { get; } Property Value Type Description RemoteWebDriver | Improve this Doc View Source Element Gets the original reference object. Declaration public RemoteWebElement Element { get; } Property Value Type Description RemoteWebElement | Improve this Doc View Source IsEnabled Gets a value indicating whether the element is enabled. Declaration public virtual bool IsEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVisible Gets a value indicating whether the element is visible. Declaration public virtual bool IsVisible { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Click() Clicks the element. Declaration public virtual void Click() | Improve this Doc View Source FindElement(By) Finds a child element by the specified locator. Declaration public RemoteWebElement FindElement(By locator) Parameters Type Name Description By locator The locator to find a child element by. Returns Type Description RemoteWebElement The . | Improve this Doc View Source FindElements(By) Finds a collection of child elements by the specified locator. Declaration public ReadOnlyCollection<RemoteWebElement> FindElements(By locator) Parameters Type Name Description By locator The locator to find child elements by. Returns Type Description ReadOnlyCollection < RemoteWebElement > The readonly collection of . | Improve this Doc View Source GetAttribute(String) Gets the value of the specified attribute for this element. Declaration public virtual string GetAttribute(string attributeName) Parameters Type Name Description System.String attributeName The name of the attribute. Returns Type Description System.String The attribute's current value if it exists; otherwise, null. | Improve this Doc View Source VerifyDriverElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration public void VerifyDriverElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. | Improve this Doc View Source VerifyDriverElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration public void VerifyDriverElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. | Improve this Doc View Source VerifyElementNotShown(By) Determines whether the given element is not shown. Declaration public void VerifyElementNotShown(By locator) Parameters Type Name Description By locator The locator for the element to locate. | Improve this Doc View Source VerifyElementShown(By) Determines whether the given element is shown. Declaration public void VerifyElementShown(By locator) Parameters Type Name Description By locator The locator for the element to find. | Improve this Doc View Source VerifyElementShown(By, Nullable<TimeSpan>) Determines whether the specified element is shown with the specified timeout. Declaration public void VerifyElementShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a specific element. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition Legerity.Exceptions.ElementNotShownException Thrown if the element is not shown. | Improve this Doc View Source VerifyElementsShown(By) Determines whether the specified elements are shown. Declaration public void VerifyElementsShown(By locator) Parameters Type Name Description By locator The locator for the element to find. Exceptions Type Condition Legerity.Exceptions.ElementNotShownException Thrown if the elements are not shown. | Improve this Doc View Source VerifyElementsShown(By, Nullable<TimeSpan>) Determines whether the specified elements are shown with the specified timeout. Declaration public void VerifyElementsShown(By locator, TimeSpan? timeout) Parameters Type Name Description By locator The locator to find a collection of elements. System.Nullable < TimeSpan > timeout The amount of time the driver should wait when searching for the locator if it is not immediately present. Exceptions Type Condition Legerity.Exceptions.ElementNotShownException Thrown if the elements are not shown. Extension Methods ElementWrapperExtensions.WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) ElementWrapperExtensions.FindWebElementByXamlType(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByXamlName(UnoElementWrapper, String) ElementWrapperExtensions.FindElementByAutomationId(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) ElementWrapperExtensions.VerifyNameOrAutomationIdContains(UnoElementWrapper, String)"
  },
  "api/Legerity.Uno.Extensions.AttributeExtensions.html": {
    "href": "api/Legerity.Uno.Extensions.AttributeExtensions.html",
    "title": "Class AttributeExtensions | Legerity for Uno Platform",
    "keywords": "Class AttributeExtensions Defines a collection of extensions for retrieving element attributes. Inheritance System.Object AttributeExtensions Namespace : Legerity.Uno.Extensions Assembly : Legerity.Uno.dll Syntax public static class AttributeExtensions : object Methods | Improve this Doc View Source GetAutomationId(IWebElement) Gets the value of the specified automation ID for this element. Declaration public static string GetAutomationId(this IWebElement element) Parameters Type Name Description IWebElement element The element to retrieve an automation ID for. Returns Type Description System.String The element's automation ID. | Improve this Doc View Source GetXamlName(IWebElement) Gets the value of the specified XAML name for this element. Declaration public static string GetXamlName(this IWebElement element) Parameters Type Name Description IWebElement element The element to retrieve a XAML name for. Returns Type Description System.String The element's XAML name."
  },
  "api/Legerity.Uno.Extensions.ElementWrapperExtensions.html": {
    "href": "api/Legerity.Uno.Extensions.ElementWrapperExtensions.html",
    "title": "Class ElementWrapperExtensions | Legerity for Uno Platform",
    "keywords": "Class ElementWrapperExtensions Defines a collection of extensions for objects. Inheritance System.Object ElementWrapperExtensions Namespace : Legerity.Uno.Extensions Assembly : Legerity.Uno.dll Syntax public static class ElementWrapperExtensions : object Methods | Improve this Doc View Source FindElementByAutomationId(UnoElementWrapper, String) Finds the first element under the given element that matches the given automation identifier. To find element for platforms supported by Uno, set the following in your App.xaml.cs constructor. Uno.UI.FrameworkElementHelper.IsUiAutomationMappingEnabled = true; For improvements to finding elements for web applications, also set the following in your App.xaml.cs constructor. Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Declaration public static RemoteWebElement FindElementByAutomationId(this UnoElementWrapper element, string automationId) Parameters Type Name Description UnoElementWrapper element The element. System.String automationId The automation identifier. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source FindElementByXamlName(UnoElementWrapper, String) Finds the first Uno Platform web element under the given element that matches the given x:Name value. To find elements with this method for web applications, set the following in your App.xaml.cs. Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Declaration public static RemoteWebElement FindElementByXamlName(this UnoElementWrapper element, string name) Parameters Type Name Description UnoElementWrapper element The web element. System.String name The x:Name of the element to find. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source FindWebElementByXamlType(UnoElementWrapper, String) Finds the first Uno Platform web element under the given element that matches the given XAML type. Declaration public static RemoteWebElement FindWebElementByXamlType(this UnoElementWrapper element, string xamlType) Parameters Type Name Description UnoElementWrapper element The web element. System.String xamlType The XAML type. Windows control types can be referenced by the element wrapper's WindowsType value. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source VerifyNameOrAutomationIdContains(UnoElementWrapper, String) Verifies the elements name or Automation ID based on the given partial compare value. Declaration public static bool VerifyNameOrAutomationIdContains(this UnoElementWrapper element, string compare) Parameters Type Name Description UnoElementWrapper element The element to verify. System.String compare The partial value to verify is the name or Automation ID. Returns Type Description System.Boolean True if the element's name or Automation ID matches partially; otherwise, false. | Improve this Doc View Source VerifyNameOrAutomationIdEquals(UnoElementWrapper, String) Verifies the elements name or AutomationId based on the given compare. Declaration public static bool VerifyNameOrAutomationIdEquals(this UnoElementWrapper element, string compare) Parameters Type Name Description UnoElementWrapper element The element to verify. System.String compare The value to verify is the name or AutomationId. Returns Type Description System.Boolean True if the element's name or AutomationId matches; otherwise, false. | Improve this Doc View Source WaitUntil<TElementWrapper>(TElementWrapper, Func<TElementWrapper, Boolean>, Nullable<TimeSpan>) Waits until a specified element condition is met, with an optional timeout. Declaration public static void WaitUntil<TElementWrapper>(this TElementWrapper element, Func<TElementWrapper, bool> condition, TimeSpan? timeout = null) where TElementWrapper : UnoElementWrapper Parameters Type Name Description TElementWrapper element The element to wait on. Func <TElementWrapper, System.Boolean > condition The condition of the element to wait on. System.Nullable < TimeSpan > timeout The optional timeout wait on the condition being true. Type Parameters Name Description TElementWrapper The type of UnoElementWrapper ."
  },
  "api/Legerity.Uno.Extensions.html": {
    "href": "api/Legerity.Uno.Extensions.html",
    "title": "Namespace Legerity.Uno.Extensions | Legerity for Uno Platform",
    "keywords": "Namespace Legerity.Uno.Extensions Classes AttributeExtensions Defines a collection of extensions for retrieving element attributes. ElementWrapperExtensions Defines a collection of extensions for objects. RemoteWebDriverExtensions Defines a collection of extensions for objects. RemoteWebElementExtensions Defines a collection of extensions for objects."
  },
  "api/Legerity.Uno.Extensions.RemoteWebDriverExtensions.html": {
    "href": "api/Legerity.Uno.Extensions.RemoteWebDriverExtensions.html",
    "title": "Class RemoteWebDriverExtensions | Legerity for Uno Platform",
    "keywords": "Class RemoteWebDriverExtensions Defines a collection of extensions for objects. Inheritance System.Object RemoteWebDriverExtensions Namespace : Legerity.Uno.Extensions Assembly : Legerity.Uno.dll Syntax public static class RemoteWebDriverExtensions : object Methods | Improve this Doc View Source FindElementByAutomationId(RemoteWebDriver, String) Finds the first element in the page that matches the given automation identifier. To find element for platforms supported by Uno, set the following in your App.xaml.cs constructor. Uno.UI.FrameworkElementHelper.IsUiAutomationMappingEnabled = true; For improvements to finding elements for web applications, also set the following in your App.xaml.cs constructor. Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Declaration public static RemoteWebElement FindElementByAutomationId(this RemoteWebDriver driver, string automationId) Parameters Type Name Description RemoteWebDriver driver The application driver. System.String automationId The automation identifier. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source FindElementByXamlName(RemoteWebDriver, String) Finds the first Uno Platform web element in the page that matches the given x:Name value. To find elements with this method for web applications, set the following in your App.xaml.cs. Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Declaration public static RemoteWebElement FindElementByXamlName(this RemoteWebDriver driver, string name) Parameters Type Name Description RemoteWebDriver driver The web application driver. System.String name The x:Name of the element to find. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source FindWebElementByXamlType(RemoteWebDriver, String) Finds the first Uno Platform web element in the page that matches the given XAML type. Declaration public static RemoteWebElement FindWebElementByXamlType(this RemoteWebDriver driver, string xamlType) Parameters Type Name Description RemoteWebDriver driver The web application driver. System.String xamlType The XAML type. Windows control types can be referenced by the element wrapper's WindowsType value. Returns Type Description RemoteWebElement The if found."
  },
  "api/Legerity.Uno.Extensions.RemoteWebElementExtensions.html": {
    "href": "api/Legerity.Uno.Extensions.RemoteWebElementExtensions.html",
    "title": "Class RemoteWebElementExtensions | Legerity for Uno Platform",
    "keywords": "Class RemoteWebElementExtensions Defines a collection of extensions for objects. Inheritance System.Object RemoteWebElementExtensions Namespace : Legerity.Uno.Extensions Assembly : Legerity.Uno.dll Syntax public static class RemoteWebElementExtensions : object Methods | Improve this Doc View Source FindElementByAutomationId(RemoteWebElement, String) Finds the first element under the given element that matches the given automation identifier. To find element for platforms supported by Uno, set the following in your App.xaml.cs constructor. Uno.UI.FrameworkElementHelper.IsUiAutomationMappingEnabled = true; For improvements to finding elements for web applications, also set the following in your App.xaml.cs constructor. Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Declaration public static RemoteWebElement FindElementByAutomationId(this RemoteWebElement element, string automationId) Parameters Type Name Description RemoteWebElement element The element. System.String automationId The automation identifier. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source FindElementByXamlName(RemoteWebElement, String) Finds the first Uno Platform web element under the given element that matches the given x:Name value. To find elements with this method for web applications, set the following in your App.xaml.cs. Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Declaration public static RemoteWebElement FindElementByXamlName(this RemoteWebElement element, string name) Parameters Type Name Description RemoteWebElement element The web element. System.String name The x:Name of the element to find. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source FindWebElementByXamlType(RemoteWebElement, String) Finds the first Uno Platform web element under the given element that matches the given XAML type. Declaration public static RemoteWebElement FindWebElementByXamlType(this RemoteWebElement element, string xamlType) Parameters Type Name Description RemoteWebElement element The web element. System.String xamlType The XAML type. Windows control types can be referenced by the element wrapper's WindowsType value. Returns Type Description RemoteWebElement The if found. | Improve this Doc View Source VerifyNameOrAutomationIdContains(RemoteWebElement, String) Verifies the elements name or Automation ID based on the given partial compare value. Declaration public static bool VerifyNameOrAutomationIdContains(this RemoteWebElement element, string compare) Parameters Type Name Description RemoteWebElement element The element to verify. System.String compare The partial value to verify is the name or Automation ID. Returns Type Description System.Boolean True if the element's name or Automation ID matches partially; otherwise, false. | Improve this Doc View Source VerifyNameOrAutomationIdEquals(RemoteWebElement, String) Verifies the elements name or AutomationId based on the given compare. Declaration public static bool VerifyNameOrAutomationIdEquals(this RemoteWebElement element, string compare) Parameters Type Name Description RemoteWebElement element The element to verify. System.String compare The value to verify is the name or AutomationId. Returns Type Description System.Boolean True if the element's name or AutomationId matches; otherwise, false."
  },
  "api/Legerity.Uno.html": {
    "href": "api/Legerity.Uno.html",
    "title": "Namespace Legerity.Uno | Legerity for Uno Platform",
    "keywords": "Namespace Legerity.Uno Classes ByExtras Defines a collection of extra locator constraints for . UnoAppManager Defines a manager for the application under test. UnoAppManagerOptions Defines a model that represents configuration options for the UnoAppManager . UnoTestClass Defines a base class for running tests with the Legerity framework for the Uno Platform."
  },
  "api/Legerity.Uno.Platform.html": {
    "href": "api/Legerity.Uno.Platform.html",
    "title": "Namespace Legerity.Uno.Platform | Legerity for Uno Platform",
    "keywords": "Namespace Legerity.Uno.Platform Classes PlatformIgnoredException Defines an exception thrown when code is called for a platform that is being ignored but not handled by the user's code. PlatformTestHelper Defines a helper for platform specific test runs."
  },
  "api/Legerity.Uno.Platform.PlatformIgnoredException.html": {
    "href": "api/Legerity.Uno.Platform.PlatformIgnoredException.html",
    "title": "Class PlatformIgnoredException | Legerity for Uno Platform",
    "keywords": "Class PlatformIgnoredException Defines an exception thrown when code is called for a platform that is being ignored but not handled by the user's code. Inheritance System.Object PlatformIgnoredException Namespace : Legerity.Uno.Platform Assembly : Legerity.Uno.dll Syntax public class PlatformIgnoredException : NotImplementedException Constructors | Improve this Doc View Source PlatformIgnoredException() Initializes a new instance of the PlatformIgnoredException class with default properties. Declaration public PlatformIgnoredException() | Improve this Doc View Source PlatformIgnoredException(String) Initializes a new instance of the PlatformIgnoredException class with a specified error message. Declaration public PlatformIgnoredException(string message) Parameters Type Name Description System.String message The error message that explains the reason for the exception. | Improve this Doc View Source PlatformIgnoredException(String, Exception) Initializes a new instance of the PlatformIgnoredException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public PlatformIgnoredException(string message, Exception inner) Parameters Type Name Description System.String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If the inner parameter is not null , the current exception is raised in a langword_csharp_catch block that handles the inner exception."
  },
  "api/Legerity.Uno.Platform.PlatformTestHelper.html": {
    "href": "api/Legerity.Uno.Platform.PlatformTestHelper.html",
    "title": "Class PlatformTestHelper | Legerity for Uno Platform",
    "keywords": "Class PlatformTestHelper Defines a helper for platform specific test runs. Inheritance System.Object PlatformTestHelper Namespace : Legerity.Uno.Platform Assembly : Legerity.Uno.dll Syntax public static class PlatformTestHelper : object Methods | Improve this Doc View Source SkipForPlatform(Action<String>, String, Type[]) Skips a specific test for a given platform based on the provided type. Declaration public static void SkipForPlatform(Action<string> ignoreAction = null, string message = null, params Type[] appManagerOptionsSkipTypes) Parameters Type Name Description Action < System.String > ignoreAction The action called to handle the ignore for the test. If not handled, a PlatformIgnoredException will be thrown. System.String message The optional message to include in the ignored result. Type [] appManagerOptionsSkipTypes The type to skip for. Exceptions Type Condition PlatformIgnoredException Thrown if the test specific ignoreAction is not provided."
  },
  "api/Legerity.Uno.UnoAppManager.html": {
    "href": "api/Legerity.Uno.UnoAppManager.html",
    "title": "Class UnoAppManager | Legerity for Uno Platform",
    "keywords": "Class UnoAppManager Defines a manager for the application under test. Inheritance System.Object UnoAppManager Namespace : Legerity.Uno Assembly : Legerity.Uno.dll Syntax public static class UnoAppManager : object Properties | Improve this Doc View Source App Gets the instance of the started application. This could be a , , , or web driver. Declaration public static RemoteWebDriver App { get; } Property Value Type Description RemoteWebDriver | Improve this Doc View Source Options Gets the instance of the options that started the application. Declaration public static UnoAppManagerOptions Options { get; set; } Property Value Type Description UnoAppManagerOptions Methods | Improve this Doc View Source StartApp(UnoAppManagerOptions) Starts the application ready for testing. Declaration public static void StartApp(UnoAppManagerOptions opts) Parameters Type Name Description UnoAppManagerOptions opts The options to configure the driver with. Exceptions Type Condition Legerity.Windows.Exceptions.WinAppDriverNotFoundException Thrown if the WinAppDriver could not be found when running with true. Legerity.Windows.Exceptions.WinAppDriverLoadFailedException Thrown if the WinAppDriver failed to load when running with true. | Improve this Doc View Source StopApp() Stops the application. Declaration public static void StopApp()"
  },
  "api/Legerity.Uno.UnoAppManagerOptions.html": {
    "href": "api/Legerity.Uno.UnoAppManagerOptions.html",
    "title": "Class UnoAppManagerOptions | Legerity for Uno Platform",
    "keywords": "Class UnoAppManagerOptions Defines a model that represents configuration options for the UnoAppManager . Inheritance System.Object UnoAppManagerOptions Namespace : Legerity.Uno Assembly : Legerity.Uno.dll Syntax public class UnoAppManagerOptions : object Constructors | Improve this Doc View Source UnoAppManagerOptions(AppManagerOptions) Initializes a new instance of the UnoAppManagerOptions class with a platform specific . Declaration public UnoAppManagerOptions(AppManagerOptions options) Parameters Type Name Description AppManagerOptions options The platform specified . Properties | Improve this Doc View Source AppManagerOptions Gets the platform specific . Declaration public AppManagerOptions AppManagerOptions { get; } Property Value Type Description AppManagerOptions Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object."
  },
  "api/Legerity.Uno.UnoTestClass.html": {
    "href": "api/Legerity.Uno.UnoTestClass.html",
    "title": "Class UnoTestClass | Legerity for Uno Platform",
    "keywords": "Class UnoTestClass Defines a base class for running tests with the Legerity framework for the Uno Platform. Inheritance System.Object UnoTestClass Namespace : Legerity.Uno Assembly : Legerity.Uno.dll Syntax public abstract class UnoTestClass : object Constructors | Improve this Doc View Source UnoTestClass(AppManagerOptions) Initializes a new instance of the UnoTestClass class with application launch option. Declaration protected UnoTestClass(AppManagerOptions options) Parameters Type Name Description AppManagerOptions options The application launch options. Properties | Improve this Doc View Source App Gets the instance of the started application. This could be a , , , or web driver. Declaration protected static RemoteWebDriver App { get; } Property Value Type Description RemoteWebDriver | Improve this Doc View Source Options Gets the model that represents the configuration options for the UnoAppManager . Declaration protected UnoAppManagerOptions Options { get; } Property Value Type Description UnoAppManagerOptions Methods | Improve this Doc View Source SkipForPlatform(Action<String>, String, Type[]) Skips a specific test for a given platform based on the provided type. Declaration public void SkipForPlatform(Action<string> ignoreAction = null, string message = null, params Type[] appManagerOptionsSkipTypes) Parameters Type Name Description Action < System.String > ignoreAction The action called to handle the ignore for the test. If not handled, a PlatformIgnoredException will be thrown. System.String message The optional message to include in the ignored result. Type [] appManagerOptionsSkipTypes The type to skip for. Exceptions Type Condition PlatformIgnoredException Thrown if the test specific ignoreAction is not provided. | Improve this Doc View Source StartApp() Starts the application ready for testing. Declaration public virtual void StartApp() | Improve this Doc View Source StopApp() Stops the application. Declaration public virtual void StopApp()"
  },
  "articles/elements/appbarbutton.html": {
    "href": "articles/elements/appbarbutton.html",
    "title": "AppBarButton | Legerity for Uno Platform",
    "keywords": "AppBarButton An AppBarButton is a simple button control that can be used within an AppBar , CommandBar , or directly within a view. Legerity provides an element wrapper for the AppBarButton implementation providing a simple abstraction that allows the button to be clicked. public AppBarButton SaveButton => App.FindElementByAutomationId(\"SaveButton\"); SaveButton.Click(); Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description Click() Clicks the button For more information, view the reference documentation: AppBarButton"
  },
  "articles/elements/appbartogglebutton.html": {
    "href": "articles/elements/appbartogglebutton.html",
    "title": "AppBarToggleButton | Legerity for Uno Platform",
    "keywords": "AppBarToggleButton An AppBarToggleButton is a button control that holds a checked state and can be used within an AppBar , CommandBar , or directly within a view. Legerity provides an element wrapper for the AppBarToggleButton implementation providing a simple abstraction that allows the button to be checked on and off. public AppBarToggleButton BoldButton => App.FindElementByAutomationId(\"BoldButton\"); BoldButton.Click(); BoldButton.ToggleOn(); BoldButton.ToggleOff(); var isBoldOn = BoldButton.IsOn; Platform Support Platform Supported Windows ✓ Android ✗ iOS ✗ WebAssembly ✓ Properties Name Type Description IsOn bool Whether the button is toggled on Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description Click() Clicks the button ToggleOn() Toggles the button into the on state ToggleOff() Toggles the button into the off state For more information, view the reference documentation: AppBarToggleButton"
  },
  "articles/elements/button.html": {
    "href": "articles/elements/button.html",
    "title": "Button | Legerity for Uno Platform",
    "keywords": "Button An Button is a simple button control that can be used directly within a view. Legerity provides an element wrapper for the Button implementation providing a simple abstraction that allows the button to be clicked. public Button RefreshButton => App.FindElementByAutomationId(\"RefreshButton\"); RefreshButton.Click(); Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description Click() Clicks the button For more information, view the reference documentation: Button"
  },
  "articles/elements/checkbox.html": {
    "href": "articles/elements/checkbox.html",
    "title": "CheckBox | Legerity for Uno Platform",
    "keywords": "CheckBox A CheckBox is a control that holds a checked state, as well as an indeterminate state. This can be used for managing selections within a form. Legerity provides an element wrapper for the CheckBox implementation providing a simple abstraction that allows the control to be checked on and off. public CheckBox AcceptCheckBox => App.FindElementByAutomationId(\"AcceptCheckBox\"); AcceptCheckBox.CheckOn(); AcceptCheckBox.CheckOff(); var isAcceptChecked = AcceptCheckBox.IsChecked; var isAcceptIndeterminate = AcceptCheckBox.IsIndeterminate; Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description IsChecked bool Whether the checkbox is checked IsIndeterminate bool Whether the checkbox is in an indeterminate state Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description CheckOn() Checks the checkbox CheckOff() Unchecks the checkbox For more information, view the reference documentation: CheckBox"
  },
  "articles/elements/combobox.html": {
    "href": "articles/elements/combobox.html",
    "title": "ComboBox | Legerity for Uno Platform",
    "keywords": "ComboBox A ComboBox is a control that allows a value to be selected from a drop down style list. Legerity provides an element wrapper for the ComboBox implementation providing a simple abstraction that allows values to be selected. public ComboBox ColorComboBox => App.FindElementByAutomationId(\"ColorComboBox\"); ColorComboBox.SelectItem(\"Green\"); var selectedItem = ColorComboBox.SelectedItem; Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description SelectedItem string The currently selected item Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description SelectItem(string) Selects an item by the specified item name For more information, view the reference documentation: ComboBox"
  },
  "articles/elements/commandbar.html": {
    "href": "articles/elements/commandbar.html",
    "title": "CommandBar | Legerity for Uno Platform",
    "keywords": "CommandBar A CommandBar is a control that can contain a collection of primary and secondary buttons directly within a view. Legerity provides an element wrapper for the CommandBar implementation providing a simple abstraction that allows the primary and secondary buttons to be actioned. public CommandBar RichEditCommandBar => App.FindElementByAutomationId(\"RichEditCommandBar\"); RichEditCommandBar.ClickPrimaryButton(\"BoldButton\"); RichEditCommandBar.ClickSecondaryButton(\"SettingsButton\"); var primaryButtons = RichEditCommandBar.PrimaryButtons; var secondaryButtons = RichEditCommandBar.SecondaryButtons; var moreButton = RichEditCommandBar.MoreButton; Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description PrimaryButtons IEnumerable<AppBarButton> The element wrappers for primary button options SecondaryButtons IEnumerable<AppBarButton> The element wrappers for secondary button options, shown when the more button has been pressed MoreButton AppBarButton The element wrappers for the ellipsis more options button Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description ClickPrimaryButton(string) Clicks a primary button by name ClickSecondaryButton(string) Opens the secondary menu and clicks a secondary button by name For more information, view the reference documentation: CommandBar"
  },
  "articles/elements/datepicker.html": {
    "href": "articles/elements/datepicker.html",
    "title": "DatePicker | Legerity for Uno Platform",
    "keywords": "DatePicker A DatePicker is a control that allows a user to select a specific date. Legerity provides an element wrapper for the DatePicker implementation providing a simple abstraction that allows a date to be set using a DateTime value. public DatePicker DateOfBirthPicker => App.FindElementByAutomationId(\"DateOfBirthPicker\"); DateOfBirthPicker.SetDate(DateTime.Now); var selectedDate = DateOfBirthPicker.SelectedDate; Platform Support Platform Supported Windows ✓ Android ✗ iOS ✗ WebAssembly ✗ Properties Name Type Description SelectedDate DateTime? The currently selected date Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description SetDate(DateTime) Sets the date selected in the DatePicker For more information, view the reference documentation: DatePicker"
  },
  "articles/elements/hyperlinkbutton.html": {
    "href": "articles/elements/hyperlinkbutton.html",
    "title": "HyperlinkButton | Legerity for Uno Platform",
    "keywords": "HyperlinkButton A HyperlinkButton is a simple button control that launches a URL and can be used directly within a view. Legerity provides an element wrapper for the HyperlinkButton implementation providing a simple abstraction that allows the button to be clicked. public HyperlinkButton UrlButton => App.FindElementByAutomationId(\"UrlButton\"); UrlButton.Click(); Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description Click() Clicks the button For more information, view the reference documentation: HyperlinkButton"
  },
  "articles/elements/textblock.html": {
    "href": "articles/elements/textblock.html",
    "title": "TextBlock | Legerity for Uno Platform",
    "keywords": "TextBlock A TextBlock is a simple content control that displays text in a readonly state. Legerity provides an element wrapper for the TextBlock implementation providing a simple abstraction that exposes the text value. public TextBlock ContentTextBlock => App.FindElementByAutomationId(\"ContentTextBlock\"); var content = ContentTextBlock.Text; Platform Support Platform Supported Windows ✓ Android ✗ iOS ✗ WebAssembly ✓ Properties Name Type Description Text string The content of the TextBlock Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible For more information, view the reference documentation: TextBlock"
  },
  "articles/elements/textbox.html": {
    "href": "articles/elements/textbox.html",
    "title": "TextBox | Legerity for Uno Platform",
    "keywords": "TextBox A TextBox is a control that allows a user to input a text value, usually used in a form. Legerity provides an element wrapper for the TextBox implementation providing a simple abstraction that allows a value to be set. public TextBox UsernameTextBox => App.FindElementByAutomationId(\"UsernameTextBox\"); UsernameTextBox.SetText(\"legerity\"); UsernameTextBox.AppendText(\"lovesunoplatform\"); UsernameTextBox.ClearText(); var text = UsernameTextBox.Text; var isReadonly = UsernameTextBox.IsReadonly; Platform Support Platform Supported Windows ✓ Android ✓ iOS ✓ WebAssembly ✓ Properties Name Type Description Text string The value that has been input IsReadonly bool Whether the input is disabled Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description SetText(string) Clears the current value and sets a new one AppendText(string) Appends a value to the current existing value ClearText() Clears the current value For more information, view the reference documentation: TextBox"
  },
  "articles/elements/timepicker.html": {
    "href": "articles/elements/timepicker.html",
    "title": "TimePicker | Legerity for Uno Platform",
    "keywords": "TimePicker A TimePicker is a control that allows a user to select a specific time. Legerity provides an element wrapper for the TimePicker implementation providing a simple abstraction that allows a time to be set using a TimeSpan value. public TimePicker TimeOfDayPicker => App.FindElementByAutomationId(\"TimeOfDayPicker\"); TimeOfDayPicker.SetTime(new TimeSpan(7, 5, 0)); var selectedDate = TimeOfDayPicker.SelectedTime; Platform Support Platform Supported Windows ✓ Android ✗ iOS ✗ WebAssembly ✗ Properties Name Type Description SelectedTime TimeSpan? The currently selected time Driver RemoteWebDriver The instance of the driver for the app Element RemoteWebElement The original reference object IsEnabled bool Whether the element is enabled IsVisible bool Whether the element is visible Actions Name Description SetTime(TimeSpan) Sets the time selected in the TimePicker For more information, view the reference documentation: TimePicker"
  },
  "articles/faqs.html": {
    "href": "articles/faqs.html",
    "title": "FAQs | Legerity for Uno Platform",
    "keywords": "FAQs Why should I use Legerity? Do you find yourself writing multiple tests to cover the functionality of your cross-platform apps? Do you find it difficult to maintain them when you've written them? That's where Legerity started from, a toolkit on top of Selenium that would make UI testing simple and quick to get started. This allows us to spend more time building applications with confidence that our consumers get the best, thoroughly tested experiences. How does Legerity for Uno Platform differ from the core Legerity framework? Legerity for Uno Platform is built on top of the core Legerity framework to provide a number of additional features bespoke to the cross-platform nature of Uno Platform apps. This includes the ability to write single tests that can run across all platforms. Using purpose built Uno Platform element wrappers, you can easily map rendered Uno Platform controls from each platform to a single element wrapper meaning you only have to write one test. What tools can I use to inspect my app's UI automation tree? There are many tools that are available to help you understand the layout of your app's UI. For Windows apps , you can refer to your Uno Platform XAML pages and controls for the most part. You'll find the x:Uid and x:Name attributes you can use to reference your elements in your UI tests. To find more detail about the underlying controls, you can use the Inspect tool installed as part of the Windows SDKs, usually found at C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.22000.0\\x64 , to inspect your app's UI. For Android and iOS apps , you can use the Appium Inspector to inspect the UI for details about specific UI elements. Using the Inspector, you'll need to install the Appium Server to allow you to connect the Inspector to your app. For WebAssembly apps , you can simply use the F12 developer tools in your browser of choice to inspect the UI. How do you keep Legerity for Uno Platform going? Use of Legerity is free of charge to any one under an MIT license. The development of the project is supported by community contributions and sponsorships where possible. I have a specific question, where can I ask? If you have a query about UI testing with Legerity for Uno Platform, please open a discussion in our GitHub project ."
  },
  "articles/get-started.html": {
    "href": "articles/get-started.html",
    "title": "Get Started | Legerity for Uno Platform",
    "keywords": "Setup Legerity for Uno Platform is an extension framework to the core Legerity framework . It is designed to be used for writing automated UI tests once for your Uno Platform applications with C#. Getting Legerity for Uno Platform To get started, you will need to install the Legerity for Uno Platform NuGet package into your .NET test project. Don't worry about testing frameworks, Legerity is agnostic so you can use it with what you're comfortable with. # Add the NuGet package to your test project dotnet add package Legerity.Uno Setting up a base test class The next step is setting up your base test class to provide the platform for writing tests against your Uno Platform app. The example below shows how to do this with the NUnit test framework. namespace UnoAppTests { using Legerity; using Legerity.Uno; using NUnit.Framework; public abstract class BaseTestClass : UnoTestClass { public const string AndroidApplication = \"com.made.myunoapp\"; public const string AndroidApplicationActivity = $\"{AndroidApplication}.MainActivity\"; public const string IOSApplication = \"com.made.myunoapp\"; public const string WasmApplication = \"http://localhost:5000\"; public const string WindowsApplication = \"com.madeapps.myunoapp_7mzr475ysvhxg!App\"; protected BaseTestClass(AppManagerOptions options) : base(options) { } static IEnumerable<AppManagerOptions> TestPlatformOptions => new List<AppManagerOptions> { new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = true }, new IOSAppManagerOptions { AppId = IOSApplication, DeviceName = \"iPhone SE (3rd generation) Simulator\", DeviceId = \"56755E6F-741B-478F-BB1B-A48E05ACFE8A\", OSVersion = \"15.4\", DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false }, new WebAppManagerOptions( WebAppDriverType.EdgeChromium, Path.Combine(Environment.CurrentDirectory)) { Url = WasmApplication, ImplicitWait = TimeSpan.FromSeconds(5) }, new WebAppManagerOptions( WebAppDriverType.Chrome, Path.Combine(Environment.CurrentDirectory)) { Url = WasmApplication, ImplicitWait = TimeSpan.FromSeconds(5) }, new WindowsAppManagerOptions(WindowsApplication) { DriverUri = \"http://127.0.0.1:4723\", LaunchWinAppDriver = true } }; [SetUp] public override void StartApp() { base.StartApp(); } [TearDown] public override void StopApp() { base.StopApp(); } } } The base UnoTestClass is part of the Legerity for Uno Platform package. It is a simple wrapper around the UnoAppManager for starting and stopping your Uno Platform app based on the provided AppManagerOptions configuration. Using your test class in action Finally, you'll be able to start writing your cross-platform UI tests. namespace UnoAppTests { using System; using System.Collections.Generic; using System.IO; using Legerity; using Legerity.Android; using Legerity.Web; using Legerity.Windows; using NUnit.Framework; using Shouldly; [TestFixtureSource(nameof(TestPlatformOptions))] public class HomePageTests : BaseTestClass { public HomePageTests(AppManagerOptions options) : base(options) { } [Test] public void ShouldLoadHomePageContent() { TextBlock content = App.FindElementByAutomationId(\"HomePageContent\"); content.Text.ShouldBe(\"Hello, Uno Platform!\"); } } } Here you're seeing the most efficient way to write tests for your Uno Platform app. You're defining the platforms under test and the tests that will run on them. Samples Legerity for Uno Platform Test App An example Uno Platform app showcasing the core controls with UI tests running on Windows, Android, and WebAssembly."
  },
  "articles/page-object-pattern.html": {
    "href": "articles/page-object-pattern.html",
    "title": "Implementing the Page Object Pattern | Legerity for Uno Platform",
    "keywords": "Implementing the Page Object Pattern with Legerity The goal of the page object pattern is to use page objects to extract page interactions from your tests. Ideally, they will store all your locators to find UI elements and their interactions for a page. Using the Legerity BasePage As a part of Legerity's core framework, the BasePage class is your starting point for replicating your app pages for your UI tests. Here's an example of a page object that replicates an app page and the interactions that are available on it. namespace UnoAppTests.Pages { using Legerity.Pages; using Legerity.Uno; using Legerity.Uno.Elements; using Legerity.Uno.Extensions; using Legerity.Windows; using OpenQA.Selenium; using OpenQA.Selenium.Appium.Android; using OpenQA.Selenium.Appium.Windows; public class LoginPage : BasePage { protected override By Trait => DetermineTrait(\"PageHeader\"); public TextBox UsernameInput => App.FindElementByAutomationId(\"UsernameInput\"); public TextBox PasswordInput => App.FindElementByAutomationId(\"PasswordInput\"); public Button LoginButton => App.FindElementByAutomationId(\"LoginButton\"); public LoginPage SetUsername(string username) { UsernameInput.SetText(username); return this; } public LoginPage SetPassword(string password) { PasswordInput.SetText(password); return this; } public HomePage Login(string username, string password) { SetUsername(username); SetPassword(password); LoginButton.Click(); return new HomePage(); } private By DetermineTrait(string automationId) { return this.App switch { AndroidDriver<AndroidElement> _ => ByExtras.AndroidXamlAutomationId(automationId), IOSDriver<IOSElement> _ => ByExtras.IOSXamlAutomationId(automationId), WindowsDriver<WindowsElement> _ => WindowsByExtras.AutomationId(automationId), _ => ByExtras.WebXamlAutomationId(automationId) }; } } } The page object contains the queries for all of the elements that can be interacted with, as well as common actions that can be performed on the page such as setting the username and password text, as well as logging in. Configuring a common page trait Each page has a trait. This is a UI element that is always displayed on this page. This can often be a title element for the view or a specific menu item in a selected state. The Trait is used when the page is constructed to ensure that the page is currently in view. By default, there will be a 2-second wait for the element to appear before the test will fail. This can be configured by providing a call to the base constructor's traitTimeout parameter with a TimeSpan that works for you. Using the page object in your UI tests Taking the page example above, we can start writing our cross-platform UI tests. The example below shows how to do this with the NUnit test framework. namespace UnoAppTests.Tests { using System; using System.Collections.Generic; using System.IO; using System.Threading.Tasks; using Legerity; using Legerity.Android; using Legerity.Web; using Legerity.Windows; using NUnit.Framework; using UnoAppTests.Pages; [TestFixtureSource(nameof(TestPlatformOptions))] public class LoginPageTests : BaseTestClass { public LoginPageTests(AppManagerOptions options) : base(options) { } static IEnumerable<AppManagerOptions> TestPlatformOptions => new List<AppManagerOptions> { new AndroidAppManagerOptions { AppId = AndroidApplication, AppActivity = AndroidApplicationActivity, DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = true }, new IOSAppManagerOptions { AppId = IOSApplication, DeviceName = \"iPhone SE (3rd generation) Simulator\", DeviceId = \"56755E6F-741B-478F-BB1B-A48E05ACFE8A\", OSVersion = \"15.4\", DriverUri = \"http://localhost:4723/wd/hub\", LaunchAppiumServer = false }, new WebAppManagerOptions( WebAppDriverType.EdgeChromium, Path.Combine(Environment.CurrentDirectory)) { Url = WasmApplication, ImplicitWait = TimeSpan.FromSeconds(5) }, new WebAppManagerOptions( WebAppDriverType.Chrome, Path.Combine(Environment.CurrentDirectory)) { Url = WasmApplication, ImplicitWait = TimeSpan.FromSeconds(5) }, new WindowsAppManagerOptions(WindowsApplication) { DriverUri = \"http://127.0.0.1:4723\", LaunchWinAppDriver = true } }; [Test] public void ShouldLoginAndShowHomepageContent() { var homepage = new LoginPage().Login(\"legerity\", \"lovesunoplatform\"); homepage.Content.ShouldBe(\"Welcome to Legerity for Uno Platform!\"); } } } For more information on how to use the page object pattern in your tests, this page object pattern guide provides a detailed understanding of the pattern and why you should use it."
  },
  "articles/prepare-uno-platform-apps.html": {
    "href": "articles/prepare-uno-platform-apps.html",
    "title": "Preparing your Uno Platform apps | Legerity for Uno Platform",
    "keywords": "Preparing your Uno Platform apps By default, Uno Platform apps don't expose the XAML IDs that you may have configured in your app's UI in order to reference them in your UI tests. However, Uno Platform provides a mechanism to do this with alterations to each app's .csproj file and a change in your App.xaml.cs file. Project file changes To allow mapping of your automation properties to controls in your Uno Platform apps, you must add the following line to the default PropertyGroup of each project's .csproj file. <IsUiAutomationMappingEnabled>true</IsUiAutomationMappingEnabled> Setting this will replace certain properties in each platform's app with the x:Uid or AutomationProperties.AutomationId XAML attribute value. For Android , this sets the View.ContentDescription property For iOS , it sets the UIView.AccessibilityIdentifier property For WebAssembly , it sets aria-label and the xamlautomationid property For more information on this, see the Uno Platform docs . Additional changes for WebAssembly When viewing the visual tree of your Uno Platform app for WebAssembly with F12 developer tools, you will need to enable UI element feature configurations in your application to display x:Uid and x:Name attributes in the DOM. This is achieved by adding the following lines to the constructor of your App.xaml.cs file. #if DEBUG && __WASM__ Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName = true; Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlProperties = true; #endif More information on this can be found in the Uno Platform docs . Providing additional XAML automation properties for Android and iOS To get the most out of your app's XAML automation properties, you want to provide additional XAML automation properties to support interactions with Android and iOS. Adding the following additional property to your XAML elements will provide the correct XAML automation ID for elements that have content. This is required to ensure that the content isn't displayed as the element name. AutomationProperties.AccessibilityView=\"Raw\" See Uno Platform's tips on why this is needed."
  },
  "articles/ui-element-wrappers.html": {
    "href": "articles/ui-element-wrappers.html",
    "title": "Building custom Uno Platform element wrappers | Legerity for Uno Platform",
    "keywords": "Uno Platform element wrappers The goal of the Uno Platform element wrappers is to provide an easy set of components that surface up properties and actions of the actual controls within the UI to make it easier for you to write tests that interact with them. Using the Uno Platform element wrappers Using an element wrapper in your UI tests is super simple. Where you want to find an element in the Selenium driver that would usually return a RemoteWebElement , AppiumWebElement or platform-specific alternative, simply replace the var or Type declaration with the intended element wrapper type. CommandBar pageCommandBar = this.App.FindElement(ByExtras.AutomationId(\"PageCommandBar\")); From there, you can access all of the additional actions and properties that are exposed by the element wrapper. Creating your own platform element wrappers While out-of-the-box, Legerity for Uno Platform provides a collection of element wrappers for the core platform controls, we expose the parts of the framework that allow you to create element wrappers for your own custom controls! Sample In this sample, the application under test has a custom combo box. It's recommended that when creating your own element wrappers, you provide the implicit operators that will allow you to use your wrapper when finding an element without direct casting. namespace UnoAppTests.Elements { using System; using Legerity.Uno.Elements; using OpenQA.Selenium; using OpenQA.Selenium.Appium.Android; using OpenQA.Selenium.Appium.iOS; using OpenQA.Selenium.Appium.Windows; using OpenQA.Selenium.Remote; public class CustomComboBox : UnoElementWrapper { public ComboBox(IWebElement element) : this(element as RemoteWebElement) { } public ComboBox(RemoteWebElement element) : base(element) { } public string SelectedItem => DetermineSelectedItem(); public static implicit operator ComboBox(RemoteWebElement element) { return new ComboBox(element); } public void SelectItem(string name) { Element.Click(); VerifyElementsShown(this.ComboBoxItemLocator(), TimeSpan.FromSeconds(2)); DetermineListElement(name).Click(); } private RemoteWebElement DetermineListElement(string name) { return Element switch { AndroidElement _ => DetermineListElementAndroid(name), IOSElement _ => DetermineListElementIOS(name), WindowsElement _ => DetermineListElementWindows(name), _ => DetermineListElementWasm(name) }; } private string DetermineSelectedItem() { return this.Element switch { AndroidElement _ => DetermineSelectedItemAndroid(), IOSElement _ => DetermineSelectedItemIOS(), WindowsElement _ => DetermineSelectedItemWindows(), _ => this.DetermineSelectedItemWasm() }; } private By ComboBoxItemLocator() { return this.Element switch { AndroidElement _ => ComboBoxItemLocatorAndroid(), IOSElement _ => ComboBoxItemLocatorIOS(), WindowsElement _ => ComboBoxItemLocatorWindows(), _ => ComboBoxItemLocatorWasm() }; } } } To support Uno Platform's various implementations across their supported platforms, you can determine child elements, properties, locators, and actions by performing a switch statement on the Element property. This will allow you to tailor your element wrapper to the platform you're targeting."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Legerity for Uno Platform",
    "keywords": "Write UI tests once, run everywhere for Uno Platform apps Legerity for Uno Platform is a framework for writing cross-platform UI tests that can be written once and run on Windows, WebAssembly, iOS, and Android Get Started Element Wrappers Simplifying your UI tests by providing easy-to-use platform element wrappers for Uno Platform controls Discover More Page Object Pattern Bringing maintainability and code reuse to your UI tests with the page object pattern Discover More Bring Your Favorite Test Framework Legerity is agnostic of .NET testing frameworks. So whether you're an NUnit, xUnit, or MSTest fan, you can work with what you know Discover More Extendable By Default Legerity for Uno Platform provides the building blocks to write element wrappers for your own custom controls Discover More Support Legerity for Uno Platform If you'd like to support Legerity for Uno Platform, considering sponsoring the project Support Us Contribute on GitHub Legerity for Uno Platform is open source and you can contribute on GitHub Contribute"
  },
  "README.html": {
    "href": "README.html",
    "title": "Legerity for Uno Platform Documentation | Legerity for Uno Platform",
    "keywords": "Legerity for Uno Platform Documentation This folder contains source code for the generation of Legerity for Uno Platform's documentation. Contributing to the docs Install dependencies Download and install docfx on your computer. MacOS brew install docfx Windows choco install docfx Running locally npm run docfx This will run the docs on http://localhost:8080"
  }
}